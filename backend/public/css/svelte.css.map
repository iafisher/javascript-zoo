{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Task.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount } from 'svelte';\n  import { api } from \"./api.js\";\n  import Task from './Task.svelte';\n\n  let id;\n  let name;\n  let description;\n  let archived;\n  let loading = true;\n  let tasks = [];\n\n  onMount(async () => {\n    const response = await fetch(\"/api/project/get?id=1\");\n    const data = await response.json();\n    // Svelte will automatically update the UI when the tasks are assigned.\n    ({id, name, description, archived, tasks} = data);\n    loading = false;\n  });\n\n  async function handleNewTask(event) {\n    if (event.keyCode === 13) {\n      const description = event.target.value.trim();\n      const payload = {\n          description: description,\n          order: tasks.length,\n          parentId: null,\n          projectId: id,\n      };\n      const newTask = await api(\"/api/task/create\", payload);\n      event.target.value = \"\";\n      if (newTask.error) {\n        console.error(newTask.error);\n        // TODO: Display a message to the user.\n        return;\n      }\n\n      // Svelte will automatically update the UI when a new task is appended.\n      // However, updates are only triggered on re-assignment, which is why it\n      // is written like this and not `tasks.append(newTask)`.\n      tasks = [...tasks, newTask];\n    }\n  }\n</script>\n\n<style>\n  /* Styles are scoped to the component and won't affect other components. */\n  label, input {\n    display: inline-block;\n  }\n\n  main {\n    width: 62rem;\n    margin: 0 auto;\n  }\n\n  label {\n    margin-right: 5px;\n  }\n\n  #new-task-form {\n    text-align: center;\n  }\n\n  .message {\n    font-size: 24px;\n    text-align: center;\n  }\n</style>\n\n<svelte:head>\n  <title>[svelte] {name}</title>\n</svelte:head>\n\n<main>\n  <div id=\"new-task-form\">\n    <label for=\"new-task\">Create a new task: </label>\n    <input type=\"text\" id=\"new-task\" on:keyup={handleNewTask}>\n  </div>\n\n  {#if loading}\n    <p class=\"message\">Loading...</p>\n  {:else}\n    {#each tasks as task}\n      <Task {...task}></Task>\n    {:else}\n      <p class=\"message\">No tasks yet</p>\n    {/each}\n  {/if}\n</main>\n",
    "<script>\n  import { api } from \"./api.js\";\n\n  const STATUS_CHOICES = [\"pending\", \"completed\"];\n\n  // These are the properties of the component.\n  export let id;\n  export let projectId;\n  export let parentId;\n  export let order;\n  export let shortDescription;\n  export let longDescription;\n  export let status;\n\n  async function handleStatusChange(event) {\n    const newStatus = event.target.value;\n    const payload = {\n      id: id,\n      status: newStatus,\n    };\n    const responseJson = await api(\"/api/task/update/status\", payload);\n    if (responseJson.error) {\n      console.error(responseJson.error)\n      // TODO: Display a message to the user.\n      return;\n    }\n    status = newStatus;\n  }\n</script>\n\n<style>\n  div {\n    padding: 15px;\n  }\n\n  h2 {\n    margin-top: 0;\n  }\n\n  select {\n    margin-bottom: 0;\n  }\n\n  div + div {\n    margin-top: 15px;\n  }\n\n  .status-pending {\n    background-color: #A9CAEF;\n  }\n\n  .status-completed {\n    background-color: #BFDF7F;\n    opacity: 50%;\n  }\n\n  .status-blocked {\n    background-color: orange;\n  }\n\n  .status-obsolete {\n    background-color: #F0F0F0;\n    opacity: 50%;\n  }\n\n  .status-nonblocking {\n    background-color: #F0F0F0;\n  }\n\n  .status-failed {\n    background-color: #EC6484;\n    opacity: 50%;\n  }\n</style>\n\n<div class=\"status-{status}\">\n  <h2>\n    {#if status === \"completed\"}\n      <s>{shortDescription}</s>\n    {:else}\n      {shortDescription}\n    {/if}\n  </h2>\n  {#if longDescription !== null}\n    <p>{longDescription}</p>\n  {/if}\n\n  <select on:change={handleStatusChange}>\n    <option name=\"{status}\">{status}</option>\n    {#each STATUS_CHOICES as statusChoice}\n      {#if status !== statusChoice}\n        <option name=\"{statusChoice}\">{statusChoice}</option>\n      {/if}\n    {/each}\n  </select>\n</div>\n"
  ],
  "names": [],
  "mappings": "AA+CE,oBAAK,CAAE,KAAK,eAAC,CAAC,AACZ,OAAO,CAAE,YAAY,AACvB,CAAC,AAED,IAAI,eAAC,CAAC,AACJ,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AAED,KAAK,eAAC,CAAC,AACL,YAAY,CAAE,GAAG,AACnB,CAAC,AAED,cAAc,eAAC,CAAC,AACd,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,QAAQ,eAAC,CAAC,AACR,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,MAAM,AACpB,CAAC;ACpCD,GAAG,cAAC,CAAC,AACH,OAAO,CAAE,IAAI,AACf,CAAC,AAED,EAAE,cAAC,CAAC,AACF,UAAU,CAAE,CAAC,AACf,CAAC,AAED,MAAM,cAAC,CAAC,AACN,aAAa,CAAE,CAAC,AAClB,CAAC,AAED,GAAG,CAAG,GAAG,cAAC,CAAC,AACT,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,eAAe,cAAC,CAAC,AACf,gBAAgB,CAAE,OAAO,AAC3B,CAAC,AAED,iBAAiB,cAAC,CAAC,AACjB,gBAAgB,CAAE,OAAO,CACzB,OAAO,CAAE,GAAG,AACd,CAAC,AAED,eAAe,cAAC,CAAC,AACf,gBAAgB,CAAE,MAAM,AAC1B,CAAC,AAED,gBAAgB,cAAC,CAAC,AAChB,gBAAgB,CAAE,OAAO,CACzB,OAAO,CAAE,GAAG,AACd,CAAC,AAED,mBAAmB,cAAC,CAAC,AACnB,gBAAgB,CAAE,OAAO,AAC3B,CAAC,AAED,cAAc,cAAC,CAAC,AACd,gBAAgB,CAAE,OAAO,CACzB,OAAO,CAAE,GAAG,AACd,CAAC"
}